{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId(\u0027Microsoft.OperationalInsights/workspaces/providers\u0027, parameters(\u0027workspace\u0027), \u0027Microsoft.SecurityInsights\u0027),\u0027/alertRules/dc7aab1e-b297-4ff2-be39-8cfbabb1388c\u0027)]",
                          "name":  "[concat(parameters(\u0027workspace\u0027),\u0027/Microsoft.SecurityInsights/dc7aab1e-b297-4ff2-be39-8cfbabb1388c\u0027)]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Azure Key Vault access TimeSeries anomaly - [WC-BASE-M]",
                                             "description":  "Indentifies a sudden increase in count of Azure Key Vault secret or vault access operations by CallerIPAddress. The query leverages a built-in KQL anomaly detection algorithm\nto find large deviations from baseline Azure Key Vault access patterns. Any sudden increase in the count of Azure Key Vault accesses can be an\nindication of adversary dumping credentials via automated methods. If you are seeing any noise, try filtering known source(IP/Account) and user-agent combinations.\nTimeSeries Reference Blog: https://techcommunity.microsoft.com/t5/azure-sentinel/looking-for-unknown-anomalies-what-is-normal-time-series/ba-p/555052",
                                             "severity":  "Low",
                                             "enabled":  true,
                                             "query":  "let MSIPs = _GetWatchlist(\"MSPublicIPsV2\")\n    | project Subnet = SearchKey, FirstOctet = toint(split(SearchKey, \".\")[0]);\nlet ManagedAttempts = \nSigninLogs\n    | union AADNonInteractiveUserSignInLogs\n    | where TimeGenerated \u003e ago(14d)\n    | where (tostring(parse_json(DeviceDetail_dynamic).trustType) != \"\" or tostring(parse_json(DeviceDetail_string).trustType) != \"\") or (DeviceDetail_dynamic or DeviceDetail_string contains \"PII Removed\")\n| distinct IPAddress;\nlet starttime = 14d;\nlet timeframe = 1d;\nlet scorethreshold = 3;\nlet baselinethreshold = 25;\n// To avoid any False Positives, filtering using AppId is recommended. For example the AppId 509e4652-da8d-478d-a730-e9d4a1996ca4 has been added in the query as it corresponds\n// to Azure Resource Graph performing VaultGet operations for indexing and syncing all tracked resources across Azure.\nlet Allowedappid = dynamic([\"509e4652-da8d-478d-a730-e9d4a1996ca4\"]);\nlet OperationList = dynamic(\n    [\"SecretGet\", \"KeyGet\", \"VaultGet\"]);\nlet TimeSeriesData = AzureDiagnostics\n    | where TimeGenerated between (startofday(ago(starttime)) .. startofday(now()))\n    | where not((identity_claim_appid_g in (Allowedappid)) and OperationName == \u0027VaultGet\u0027)\n    | where ResourceType =~ \"VAULTS\" and ResultType =~ \"Success\"\n    | where OperationName in (OperationList)\n    | extend\n        ResultType = column_ifexists(\"ResultType\", \"None\"),\n        CallerIPAddress = column_ifexists(\"CallerIPAddress\", \"None\")\n    | where ResultType !~ \"None\" and isnotempty(ResultType)\n    | where CallerIPAddress !~ \"None\" and isnotempty(CallerIPAddress)\n    | project TimeGenerated, OperationName, Resource, CallerIPAddress\n    | make-series HourlyCount=count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step timeframe by CallerIPAddress;\n//Filter anomolies against TimeSeriesData\nlet TimeSeriesAlerts = TimeSeriesData\n    | extend (anomalies, score, baseline) = series_decompose_anomalies(HourlyCount, scorethreshold, -1, \u0027linefit\u0027)\n    | mv-expand\n        HourlyCount to typeof(double),\n        TimeGenerated to typeof(datetime),\n        anomalies to typeof(double),\n        score to typeof(double),\n        baseline to typeof(long)\n    | where anomalies \u003e 0\n    | extend AnomalyHour = TimeGenerated\n    | where baseline \u003e baselinethreshold // Filtering low count events per baselinethreshold\n    | project\n        CallerIPAddress,\n        AnomalyHour,\n        TimeGenerated,\n        HourlyCount,\n        baseline,\n        anomalies,\n        score;\nlet AnomalyHours = TimeSeriesAlerts\n    | where TimeGenerated \u003e ago(2d)\n    | project TimeGenerated;\n// Filter the alerts since specified timeframe\nlet alerttable = \nTimeSeriesAlerts\n| where TimeGenerated \u003e ago(2d)\n// Join against base logs since specified timeframe to retrive records associated with the hour of anomoly\n| join kind = innerunique (\n    AzureDiagnostics\n    | where TimeGenerated \u003e ago(2d)\n    | where not((identity_claim_appid_g in (Allowedappid)) and OperationName == \u0027VaultGet\u0027)\n    | where ResourceType =~ \"VAULTS\" and ResultType =~ \"Success\"\n    | where OperationName in (OperationList)\n    | extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n    | where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n    | extend ResultType = column_ifexists(\"ResultType\", \"NoResultType\")\n    | extend\n        requestUri_s = column_ifexists(\"requestUri_s\", \"None\"),\n        identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = column_ifexists(\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\", \"None\"),\n        identity_claim_oid_g = column_ifexists(\"identity_claim_oid_g\", \"\"),\n        identity_claim_upn_s = column_ifexists(\"identity_claim_upn_s\", \"\")\n    | extend\n        CallerObjectId = iff(isempty(identity_claim_oid_g), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, identity_claim_oid_g),\n        CallerObjectUPN = iff(isempty(identity_claim_upn_s), identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s, identity_claim_upn_s)\n    | extend\n        id_s = column_ifexists(\"id_s\", \"None\"),\n        CallerIPAddress = column_ifexists(\"CallerIPAddress\", \"None\"),\n        clientInfo_s = column_ifexists(\"clientInfo_s\", \"None\")\n    | summarize PerOperationCount=count(), LatestAnomalyTime = arg_max(TimeGenerated, *)\n        by\n        bin(TimeGenerated, 1h),\n        Resource,\n        OperationName,\n        id_s,\n        CallerIPAddress,\n        identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g,\n        identity_claim_oid_g,\n        requestUri_s,\n        clientInfo_s\n    )\n    on CallerIPAddress\n| extend\n    CallerObjectId = iff(isempty(identity_claim_oid_g), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, identity_claim_oid_g),\n    CallerObjectUPN = iff(isempty(identity_claim_upn_s), identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s, identity_claim_upn_s)\n| summarize\n    EventCount=count(),\n    OperationNameList = make_set(OperationName, 1000),\n    RequestURLList = make_set(requestUri_s, 100),\n    AccountList = make_set(CallerObjectId, 100),\n    AccountMax = arg_max(CallerObjectId, *)\n    by Resource, id_s, clientInfo_s, LatestAnomalyTime\n| extend timestamp = LatestAnomalyTime;\nlet subnetCheck = alerttable\n    | extend IP = tostring(CallerIPAddress)\n    | extend FirstOctet = toint(split(IP, \".\")[0])\n    | join kind=leftouter MSIPs on FirstOctet\n    | extend IsInSubnet = ipv4_is_in_range(IP, Subnet)\n    | summarize IsInSubnet = max(toint(IsInSubnet)) by IP;\nalerttable\n| join kind=leftouter subnetCheck on $left.CallerIPAddress == $right.IP\n| extend IsInSubnet = tobool(IsInSubnet)\n| where (isnotempty(identity_claim_upn_s)) or (IsInSubnet!= true)\n| join kind=leftanti ManagedAttempts on $left.CallerIPAddress == $right.IPAddress\n| where not( ipv4_is_private( CallerIPAddress))",
                                             "queryFrequency":  "P1D",
                                             "queryPeriod":  "P14D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT1H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "CredentialAccess"
                                                         ],
                                             "techniques":  [
                                                                "T1003"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  "0914adab-90b5-47a3-a79f-7cdcac843aa7",
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  false,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5H",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  {
                                                                   "OperationName":  "OperationName",
                                                                   "CallerUPN":  "CallerObjectUPN"
                                                               },
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Name",
                                                                                                  "columnName":  "AccountMax"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "CallerIPAddress"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  "1.0.5"
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}