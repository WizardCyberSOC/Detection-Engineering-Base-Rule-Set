{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/509d2f19-3f71-49ed-a403-71bc4d312447')]",
                          "name":  "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/509d2f19-3f71-49ed-a403-71bc4d312447')]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Rubeus AskTGS Kerberos Ticket Harvesting Attempt Detected - [WC-BASE]",
                                             "description":  "This alert triggers when a network-inspected Kerberos Ticket Granting Service Request (TGS-REQ) is observed containing specific Kerberos ticket flags that align with known behaviors of the Rubeus AskTGS module, commonly used in Kerberoasting attacks.\nIn a Kerberoasting attack, adversaries request service tickets (TGS) for accounts tied to high-privileged services. They then extract the service ticket (TGS), crack it offline, and retrieve the service accountâ€™s plaintext password â€” often leading to privilege escalation and lateral movement within the domain.\nContext - Common Tools Used by Attackers:\nSeveral offensive tools and C2 frameworks implement Kerberoasting, including:\n\t1. Rubeus\n\t2. Kekeo\n\t3. Empire\n\t4. Impacket\nCustom C2 platform implementations\nWhile this detection focuses on Rubeus behavior, the same principles apply to many other tools exploiting the same protocol weaknesses.\nTechnical Analysis - Rule Logic:\nSource Code Review Insight: During detection engineering, examining Rubeusâ€™s source code revealed distinct behavior:\nFlag combinations like Forwardable, Renewable, and RenewableOK are set together in synthetic TGS-REQ packets.\nThe tool often omits the Forwarded flag unless performing a legitimate ticket forward operation.\nA specific time string formatting (visible in the source code) is also unique but beyond this specific rule scope.\nThese observations inform the detection strategy, focusing on ticket options bit patterns indicative of Rubeus.",
                                             "severity":  "Medium",
                                             "enabled":  true,
                                             "query":  "let forwardable = binary_shift_left(1, 30);\r\nlet renewable = binary_shift_left(1, 23);\r\nlet renewable_ok = binary_shift_left(1, 4);\r\nlet forwarded =  binary_shift_left(1, 29);\r\nlet RubeusAskTGS = binary_or(forwardable, binary_or(renewable_ok, (binary_or(renewable, 0))));\r\nDeviceNetworkEvents\r\n| where ActionType == \"NetworkSignatureInspected\"\r\n| where AdditionalFields contains \"Kerberos_TGS_REQ\"\r\n| extend ADF=parse_json(AdditionalFields)\r\n| extend SignatureName=tostring(ADF.SignatureName), SignatureMatchedContent=url_decode(tostring(ADF.SignatureMatchedContent)), SamplePacketContent=(tostring(ADF.SamplePacketContent))\r\n| extend trimmed_str = replace_string(replace_string(SamplePacketContent, '[\"', ''), '\"]', '')\r\n| extend StartTLVFlags = indexof(trimmed_str, \"%A0%07%03%05\")+12 \r\n| extend StartTLVTag = indexof_regex(trimmed_str, @\"(?i)\\%A2([^\\%]|(\\%[A-F0-9]{2}))\\%1B([^\\%]|(\\%[A-F0-9]{2}))\\w+\\.\\w+\") \r\n| where StartTLVTag \u003e StartTLVFlags and StartTLVTag \u003e= 0 and StartTLVFlags \u003e= 0\r\n| extend krbflags = substring(trimmed_str, StartTLVFlags, StartTLVTag-StartTLVFlags)\r\n| extend krbflags = iff(krbflags contains \"%A0%07%03%05\", substring(krbflags, indexof(krbflags, \"%A0%07%03%05\")+12), krbflags)\r\n| extend krbflags2 = extract_all(@\"(?i)(([^\\%])|(\\%[A-F0-9]{2}))\", dynamic([1]), krbflags) \r\n| project-away krbflags,trimmed_str, StartTLVFlags, StartTLVTag\r\n| mv-apply f = krbflags2 to typeof(string) on (\r\n    extend f = iff (f startswith \"%\", f, strcat(\"%\", tohex(toint(to_utf8(f)[0]))))\r\n    | extend f = replace_string(f, \"%\", \" 0x\")\r\n    | summarize f=make_list(f)\r\n    | extend ticketOptions = tohex(binary_shift_left(toint(f[0]), 4*8) + binary_shift_left(toint(f[1]), 3*8) + binary_shift_left(toint(f[2]), 2*8) + binary_shift_left(toint(f[3]), 1*8) + toint(f[4]))\r\n)\r\n| project-away krbflags2,f\r\n| project-reorder TimeGenerated, DeviceId, DeviceName, ActionType, ticketOptions\r\n| extend ticketOptions0x=toint(strcat(\"0x\",ticketOptions))\r\n| where (binary_and(ticketOptions0x, RubeusAskTGS) == RubeusAskTGS) \r\n| where not (binary_and(ticketOptions0x, forwarded) == forwarded)\r\n| where not( ipv4_is_private( RemoteIP))\r\n",
                                             "queryFrequency":  "PT15M",
                                             "queryPeriod":  "PT15M",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "CommandAndControl"
                                                         ],
                                             "techniques":  [
                                                                "T1132"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  null,
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  false,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5H",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  null,
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Name",
                                                                                                  "columnName":  "InitiatingProcessAccountUpn"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "RemoteIP"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "Host",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "FullName",
                                                                                                  "columnName":  "DeviceName"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  null
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}