{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f78ccd15-6ec1-4cfa-bec4-d9d27d1bb4d5')]",
                          "name":  "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f78ccd15-6ec1-4cfa-bec4-d9d27d1bb4d5')]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "User Login from Different States Within 3 Hours - [WC-BASE-X]",
                                             "description":  "Detects successful user logins from different states within 3 hours, where at least one state hasn't been logged in from before in the last 2 weeks.",
                                             "severity":  "Low",
                                             "enabled":  true,
                                             "query":  "let timeframe = ago(3h);\r\nlet threshold = 2;\r\nlet alerttable =\r\n    SigninLogs\r\n    | where ResultType == 0\r\n    | where Location == \"US\"\r\n    | where isnotempty(LocationDetails.state)\r\n    | where TimeGenerated \u003e timeframe\r\n    | summarize\r\n        StartTime = min(TimeGenerated),\r\n        EndTime = max(TimeGenerated),\r\n        AccessedStates = make_set(LocationDetails.state)\r\n        by UserPrincipalName\r\n    | extend NumOfStates = array_length(AccessedStates)\r\n    | where NumOfStates \u003e= threshold;\r\nlet LocationDetails = SigninLogs\r\n    | where ResultType == 0\r\n    | where Location == \"US\"\r\n    | where isnotempty(LocationDetails.state)\r\n    | where TimeGenerated \u003e timeframe\r\n    | join kind=inner alerttable on $left.UserPrincipalName == $right.UserPrincipalName\r\n    | extend UnfamiliarState = strcat(LocationDetails.state)\r\n    | summarize\r\n        Applications = make_set(AppDisplayName),\r\n        AuthenticationType = make_set(AuthenticationRequirement),\r\n        Device = make_set(DeviceDetail),\r\n        RiskEvent= make_set(RiskEventTypes),\r\n        RiskEventV2 = make_set(RiskEventTypes_V2)\r\n        by UserPrincipalName, IPAddress, UnfamiliarState;\r\nlet IPManagedAttempts = SigninLogs\r\n    | union AADNonInteractiveUserSignInLogs\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | where (tostring(parse_json(DeviceDetail_dynamic).trustType) != \"\" or tostring(parse_json(DeviceDetail_string).trustType) != \"\") or (DeviceDetail_dynamic or DeviceDetail_string contains \"PII Removed\")\r\n    | distinct IPAddress;\r\nlet KnownLocations = SigninLogs\r\n    | where TimeGenerated between (ago(14d) .. ago(3h))\r\n    | where ResultType == 0\r\n    | where Location == \"US\"\r\n    | where isnotempty(LocationDetails.state)\r\n    | summarize UserKnownStates = make_set(LocationDetails.state) by UserPrincipalName;\r\nalerttable\r\n| join kind=inner LocationDetails on UserPrincipalName\r\n| join kind=leftouter KnownLocations on UserPrincipalName\r\n| project-reorder\r\n    StartTime,\r\n    EndTime,\r\n    UserPrincipalName,\r\n    NumOfStates,\r\n    UnfamiliarState,\r\n    AccessedStates,\r\n    UserKnownStates,\r\n    IPAddress,\r\n    Applications,\r\n    AuthenticationType,\r\n    Device,\r\n    RiskEvent,\r\n    RiskEventV2\r\n| project-away UserPrincipalName1, UserPrincipalName2\r\n| where not(UserKnownStates has UnfamiliarState)\r\n| join kind=leftanti IPManagedAttempts on IPAddress\r\n| where Applications has_any (\"Microsoft Outlook\", \"Outlook Mobile\", \"Office 365 Exchange Online\", \"My Signins\", \"My Profile\", \"Microsoft Account Controls V2\", \"Office365 Shell WCSS-Client\", \"Office 365\", \"OfficeHome\") // Applications often associated with Evilginx\r\n| extend IPSubnet = iff(\r\n    indexof(IPAddress, \":\") != -1,  // If colon exists, it's IPv6\r\n    trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \":\", indexof(IPAddress, \":\") + 1))),\r\n    trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \".\", indexof(IPAddress, \".\") + 1)))\r\n)\r\n| extend LocationDetail = strcat(\"US-\",UnfamiliarState)\r\n| join kind=leftouter UsersInfo_CL on $left.UserPrincipalName == $right.UserPrincipalName_s\r\n| where not( FamiliarIPSubnets_s has IPSubnet and FamiliarLocations_s has LocationDetail)",
                                             "queryFrequency":  "PT3H",
                                             "queryPeriod":  "P14D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "InitialAccess"
                                                         ],
                                             "techniques":  [
                                                                "T1078"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  null,
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  true,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5H",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  {
                                                                   "State":  "UnfamiliarState"
                                                               },
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Name",
                                                                                                  "columnName":  "UserPrincipalName"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "IPAddress"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  null
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}