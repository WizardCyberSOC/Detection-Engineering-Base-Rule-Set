{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId(\u0027Microsoft.OperationalInsights/workspaces/providers\u0027, parameters(\u0027workspace\u0027), \u0027Microsoft.SecurityInsights\u0027),\u0027/alertRules/d3130091-a3e5-48ee-a7bd-7c86ced493e0\u0027)]",
                          "name":  "[concat(parameters(\u0027workspace\u0027),\u0027/Microsoft.SecurityInsights/d3130091-a3e5-48ee-a7bd-7c86ced493e0\u0027)]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Authentication Attempt from New Country - [WC-BASE-MX]",
                                             "description":  "Detects when there is an INTERACTIVE log in attempt from a country that has not seen a successful login in the previous 14 days. Also identifies NON-INTERACTIVE log in attempts from blacklisted countries.\n  Threat actors may attempt to authenticate with credentials from compromised accounts - monitoring attempts from anomalous locations may help identify these attempts.\n  Authentication attempts should be investigated to ensure the activity was legitimate and if there is other similar activity.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins\nExtended Functionality: This rule uses a custom table that\u0027s derived from a logic app to ingest the users\u0027 familiar sign-in locations for tuning purposes.",
                                             "severity":  "Medium",
                                             "enabled":  true,
                                             "query":  "let CountryCodeMap = datatable(CountryCode:string, Country:string)\n[\n    \"AF\", \"AFGHANISTAN\",\n    \"AL\", \"ALBANIA\",\n    \"DZ\", \"ALGERIA\",\n    \"AD\", \"ANDORRA\",\n    \"AO\", \"ANGOLA\",\n    \"AG\", \"ANTIGUA AND BARBUDA\",\n    \"AR\", \"ARGENTINA\",\n    \"AM\", \"ARMENIA\",\n    \"AU\", \"AUSTRALIA\",\n    \"AT\", \"AUSTRIA\",\n    \"AZ\", \"AZERBAIJAN\",\n    \"BS\", \"BAHAMAS\",\n    \"BH\", \"BAHRAIN\",\n    \"BD\", \"BANGLADESH\",\n    \"BB\", \"BARBADOS\",\n    \"BY\", \"BELARUS\",\n    \"BE\", \"BELGIUM\",\n    \"BZ\", \"BELIZE\",\n    \"BJ\", \"BENIN\",\n    \"BT\", \"BHUTAN\",\n    \"BO\", \"BOLIVIA\",\n    \"BA\", \"BOSNIA AND HERZEGOVINA\",\n    \"BW\", \"BOTSWANA\",\n    \"BR\", \"BRAZIL\",\n    \"BN\", \"BRUNEI\",\n    \"BG\", \"BULGARIA\",\n    \"BF\", \"BURKINA FASO\",\n    \"BI\", \"BURUNDI\",\n    \"KH\", \"CAMBODIA\",\n    \"CM\", \"CAMEROON\",\n    \"CA\", \"CANADA\",\n    \"CV\", \"CAPE VERDE\",\n    \"CF\", \"CENTRAL AFRICAN REPUBLIC\",\n    \"TD\", \"CHAD\",\n    \"CL\", \"CHILE\",\n    \"CN\", \"CHINA\",\n    \"CO\", \"COLOMBIA\",\n    \"KM\", \"COMOROS\",\n    \"CD\", \"CONGO (KINSHASA)\",\n    \"CG\", \"CONGO (BRAZZAVILLE)\",\n    \"CR\", \"COSTA RICA\",\n    \"HR\", \"CROATIA\",\n    \"CU\", \"CUBA\",\n    \"CY\", \"CYPRUS\",\n    \"CZ\", \"CZECH REPUBLIC\",\n    \"DK\", \"DENMARK\",\n    \"DJ\", \"DJIBOUTI\",\n    \"DM\", \"DOMINICA\",\n    \"DO\", \"DOMINICAN REPUBLIC\",\n    \"EC\", \"ECUADOR\",\n    \"EG\", \"EGYPT\",\n    \"SV\", \"EL SALVADOR\",\n    \"GQ\", \"EQUATORIAL GUINEA\",\n    \"ER\", \"ERITREA\",\n    \"EE\", \"ESTONIA\",\n    \"SZ\", \"ESWATINI\",\n    \"ET\", \"ETHIOPIA\",\n    \"FJ\", \"FIJI\",\n    \"FI\", \"FINLAND\",\n    \"FR\", \"FRANCE\",\n    \"GA\", \"GABON\",\n    \"GM\", \"GAMBIA\",\n    \"GE\", \"GEORGIA\",\n    \"DE\", \"GERMANY\",\n    \"GH\", \"GHANA\",\n    \"GR\", \"GREECE\",\n    \"GD\", \"GRENADA\",\n    \"GT\", \"GUATEMALA\",\n    \"GN\", \"GUINEA\",\n    \"GW\", \"GUINEA-BISSAU\",\n    \"GY\", \"GUYANA\",\n    \"HT\", \"HAITI\",\n    \"HN\", \"HONDURAS\",\n    \"HU\", \"HUNGARY\",\n    \"IS\", \"ICELAND\",\n    \"IN\", \"INDIA\",\n    \"ID\", \"INDONESIA\",\n    \"IR\", \"IRAN\",\n    \"IQ\", \"IRAQ\",\n    \"IE\", \"IRELAND\",\n    \"IL\", \"ISRAEL\",\n    \"IT\", \"ITALY\",\n    \"CI\", \"IVORY COAST\",\n    \"JM\", \"JAMAICA\",\n    \"JP\", \"JAPAN\",\n    \"JO\", \"JORDAN\",\n    \"KZ\", \"KAZAKHSTAN\",\n    \"KE\", \"KENYA\",\n    \"KI\", \"KIRIBATI\",\n    \"KW\", \"KUWAIT\",\n    \"KG\", \"KYRGYZSTAN\",\n    \"LA\", \"LAOS\",\n    \"LV\", \"LATVIA\",\n    \"LB\", \"LEBANON\",\n    \"LS\", \"LESOTHO\",\n    \"LR\", \"LIBERIA\",\n    \"LY\", \"LIBYA\",\n    \"LI\", \"LIECHTENSTEIN\",\n    \"LT\", \"LITHUANIA\",\n    \"LU\", \"LUXEMBOURG\",\n    \"MG\", \"MADAGASCAR\",\n    \"MW\", \"MALAWI\",\n    \"MY\", \"MALAYSIA\",\n    \"MV\", \"MALDIVES\",\n    \"ML\", \"MALI\",\n    \"MT\", \"MALTA\",\n    \"MH\", \"MARSHALL ISLANDS\",\n    \"MR\", \"MAURITANIA\",\n    \"MU\", \"MAURITIUS\",\n    \"MX\", \"MEXICO\",\n    \"FM\", \"MICRONESIA\",\n    \"MD\", \"MOLDOVA\",\n    \"MC\", \"MONACO\",\n    \"MN\", \"MONGOLIA\",\n    \"ME\", \"MONTENEGRO\",\n    \"MA\", \"MOROCCO\",\n    \"MZ\", \"MOZAMBIQUE\",\n    \"MM\", \"MYANMAR\",\n    \"NA\", \"NAMIBIA\",\n    \"NR\", \"NAURU\",\n    \"NP\", \"NEPAL\",\n    \"NL\", \"NETHERLANDS\",\n    \"NZ\", \"NEW ZEALAND\",\n    \"NI\", \"NICARAGUA\",\n    \"NE\", \"NIGER\",\n    \"NO\", \"NORWAY\",\n    \"OM\", \"OMAN\",\n    \"PK\", \"PAKISTAN\",\n    \"PW\", \"PALAU\",\n    \"PA\", \"PANAMA\",\n    \"PG\", \"PAPUA NEW GUINEA\",\n    \"PY\", \"PARAGUAY\",\n    \"PE\", \"PERU\",\n    \"PH\", \"PHILIPPINES\",\n    \"PL\", \"POLAND\",\n    \"PT\", \"PORTUGAL\",\n    \"QA\", \"QATAR\",\n    \"RO\", \"ROMANIA\",\n    \"RW\", \"RWANDA\",\n    \"KN\", \"SAINT KITTS AND NEVIS\",\n    \"LC\", \"SAINT LUCIA\",\n    \"VC\", \"SAINT VINCENT AND THE GRENADINES\",\n    \"WS\", \"SAMOA\",\n    \"SM\", \"SAN MARINO\",\n    \"ST\", \"SAO TOME AND PRINCIPE\",\n    \"SA\", \"SAUDI ARABIA\",\n    \"SN\", \"SENEGAL\",\n    \"RS\", \"SERBIA\",\n    \"SC\", \"SEYCHELLES\",\n    \"SL\", \"SIERRA LEONE\",\n    \"SG\", \"SINGAPORE\",\n    \"SK\", \"SLOVAKIA\",\n    \"SI\", \"SLOVENIA\",\n    \"SB\", \"SOLOMON ISLANDS\",\n    \"SO\", \"SOMALIA\",\n    \"ZA\", \"SOUTH AFRICA\",\n    \"KR\", \"SOUTH KOREA\",\n    \"ES\", \"SPAIN\",\n    \"LK\", \"SRI LANKA\",\n    \"SD\", \"SUDAN\",\n    \"SR\", \"SURINAME\",\n    \"SE\", \"SWEDEN\",\n    \"CH\", \"SWITZERLAND\",\n    \"SY\", \"SYRIA\",\n    \"TJ\", \"TAJIKISTAN\",\n    \"TZ\", \"TANZANIA\",\n    \"TH\", \"THAILAND\",\n    \"TL\", \"TIMOR-LESTE\",\n    \"TG\", \"TOGO\",\n    \"TO\", \"TONGA\",\n    \"TT\", \"TRINIDAD AND TOBAGO\",\n    \"TN\", \"TUNISIA\",\n    \"TR\", \"TURKEY\",\n    \"TM\", \"TURKMENISTAN\",\n    \"TV\", \"TUVALU\",\n    \"UG\", \"UGANDA\",\n    \"AE\", \"UNITED ARAB EMIRATES\",\n    \"GB\", \"UNITED KINGDOM\",\n    \"US\", \"UNITED STATES\",\n    \"UY\", \"URUGUAY\",\n    \"UZ\", \"UZBEKISTAN\",\n    \"VU\", \"VANUATU\",\n    \"VE\", \"VENEZUELA\",\n    \"VN\", \"VIETNAM\",\n    \"YE\", \"YEMEN\",\n    \"ZM\", \"ZAMBIA\",\n    \"ZW\", \"ZIMBABWE\"\n];\nlet GetUserOriginCountry = IdentityInfo\n| where TimeGenerated \u003e ago(14d)\n| where isnotempty( Country)\n| extend Country = toupper(Country)\n| summarize arg_max(TimeGenerated,*) by AccountUPN\n| project UserPrincipalName = tolower(AccountUPN), UserCountryOrigin = Country\n| join kind=leftouter CountryCodeMap on $left.UserCountryOrigin == $right.Country\n| project-away Country;\nlet GetUserCreationDate = IdentityInfo\n| where TimeGenerated \u003e ago(14d)\n| summarize arg_max(TimeGenerated,*) by AccountUPN\n| project UserPrincipalName = tolower(AccountUPN),AccountCreationTime;\nlet KnownLocations = SigninLogs\n    | where TimeGenerated between(ago(14d) .. ago(1h))\n    | where ResultType == 0\n    | where isnotempty( Location)\n    | summarize UserKnownLocation = make_set(Location) by UserPrincipalName;\nlet AnomalousSignIn = SigninLogs\n    | where TimeGenerated \u003e ago(1h) // CHANGE IT DEPENDING ON RULE FREQUENCY\n    | where ResultType in (0)\n    | where isnotempty(Location)\n    | join kind=leftouter KnownLocations on UserPrincipalName\n    | where tostring(parse_json(DeviceDetail).trustType) == \"\"\n    | extend AnomalousLocationDetail = Location\n    | where not(UserKnownLocation has AnomalousLocationDetail);\nlet ManagedAttempts = SigninLogs\n| union AADNonInteractiveUserSignInLogs\n| where TimeGenerated \u003e ago(14d)\n| where isnotempty( DeviceDetail_dynamic.deviceId) or isnotempty( parse_json(DeviceDetail_string).deviceId)\n| distinct IPAddress;\nlet NonInterKnownLocation = AADNonInteractiveUserSignInLogs\n    | where TimeGenerated between (ago(14d) .. ago(1h))\n    | where ResultType == 0\n    | where isnotempty( Location)\n    | summarize NonInterKnownLocations = make_set(Location) by UserPrincipalName;\nlet AnomalousNonInterSignin = AADNonInteractiveUserSignInLogs\n    | where TimeGenerated \u003e ago(1h)\n    | join kind=leftouter NonInterKnownLocation on UserPrincipalName\n    | where ResultType == 0\n    | where isnotempty(Location)\n    | where not(NonInterKnownLocations has Location)\n    | where Location in (\"RU\", \"UA\", \"NG\")\n    | summarize\n        Device = make_set(DeviceDetail),\n        ClientApp =make_set(ClientAppUsed),\n        Set_Result = make_set(ResultType),\n        Set_Status = make_set(Status),\n        Applications = make_set(AppDisplayName),\n        RiskType = make_set(RiskEventTypes),\n        RiskTypeV2 = make_set(RiskEventTypes_V2),\n        UserAgent = make_set(UserAgent),\n        Time = make_set(TimeGenerated, 1),\n        NormalLocationsfrom2weeks = make_set(NonInterKnownLocations),\n        AuthDetails = make_set(AuthenticationDetails)\n        by UserPrincipalName, IPAddress, Location, Type\n    | join kind= leftanti  ManagedAttempts on IPAddress\n    | project-reorder\n        Time,\n        UserPrincipalName,\n        IPAddress,\n        Location,\n        NormalLocationsfrom2weeks,\n        Type,\n        Set_Result,\n        Set_Status,\n        AuthDetails,\n        Applications,\n        Device,\n        ClientApp,\n        UserAgent,\n        RiskType,\n        RiskTypeV2;\nlet GetEmailDetails = SigninLogs\n    | where TimeGenerated \u003e ago(14d)\n    | where isnotempty(DeviceDetail.operatingSystem) or isnotempty(parse_json(DeviceDetail).browser)\n    | extend Device = iff(isempty(DeviceDetail.operatingSystem), (tostring(parse_json(DeviceDetail).browser)), (tostring(parse_json(DeviceDetail).operatingSystem)))\n    | extend Device = iff(Device contains \"Safari\", \"Ios \", Device)\n    | summarize\n        Devices = make_set(Device),\n        ResultType = make_set(ResultType),\n        AuthenticationRequirement = make_set(AuthenticationRequirement)\n        by\n        UserPrincipalName,\n        IPAddress,\n        Location,\n        LocationDetail = strcat(Location, \"-\", LocationDetails.state)\n    | extend SuccessorFailed = iff(array_index_of(ResultType, \"0\") != -1, \"successful\", \"failed\");\nAnomalousSignIn\n| summarize\n    Device = make_set(DeviceDetail),\n    ClientApp =make_set(ClientAppUsed),\n    Set_Result = make_set(ResultType),\n    Set_Status = make_set(Status),\n    Applications = make_set(AppDisplayName),\n    RiskType = make_set(RiskEventTypes),\n    RiskTypeV2 = make_set(RiskEventTypes_V2),\n    UserAgent = make_set(UserAgent),\n    Time = min(TimeGenerated),\n    NormalLocationsfrom2weeks = make_set(UserKnownLocation),\n    AuthDetails = make_set(AuthenticationDetails)\n    by UserPrincipalName, IPAddress, AnomalousLocationDetail\n| join kind= leftanti ManagedAttempts on IPAddress\n| join kind=leftouter GetEmailDetails on UserPrincipalName, IPAddress, $left.AnomalousLocationDetail == $right.Location\n| extend formatted_time = format_datetime(todatetime(Time), \u0027yyyy-MM-dd HH:mm\u0027)\n| extend AuthRequirement = iff(AuthenticationRequirement contains \"multifactor\", \u0027multifactor authentication\u0027, \u0027singlefactor authentication\u0027)\n| extend EmailTemplate = strcat(\"Hi,\\n\\nKindly note that an alert was raised on \", formatted_time, \" [UTC] due to the user \", UserPrincipalName, \" having unfamiliar sign-in properties. Upon our investigations, we found that the user had \", SuccessorFailed, \" \", AuthRequirement, \" attempts accessing the applications \", Applications, \" from the IP address \", IPAddress, \" which classified as (CLEAN OR VPN) and is located in \", LocationDetail, \". The attempt was through non-managed and non-compliant \", Devices, \" device.\\n\\nKindly note that the user\u0027s previous login locations is from \", NormalLocationsfrom2weeks, \".\\n\\nCan you please confirm if this is an expected activity?\\n\\nRegards,\\n\\nSOC\")\n| project-reorder\n    Time,\n    UserPrincipalName,\n    IPAddress,\n    AnomalousLocationDetail,\n    NormalLocationsfrom2weeks,\n    Set_Result,\n    Set_Status,\n    AuthDetails,\n    Applications,\n    Device,\n    ClientApp,\n    UserAgent,\n    RiskType,\n    RiskTypeV2,\n    EmailTemplate\n| project-away UserPrincipalName1, IPAddress1, Location, formatted_time, AuthRequirement\n| join kind=leftouter UsersInfo_CL on $left.UserPrincipalName == $right.UserPrincipalName_s\n| where not(FamiliarCountries_s has AnomalousLocationDetail)\n| union AnomalousNonInterSignin\n| join kind=leftouter GetUserCreationDate on UserPrincipalName\n| extend DaysSinceAccountCreation = datetime_diff( \u0027day\u0027,now(),AccountCreationTime)\n| where DaysSinceAccountCreation \u003e 7\n| join kind=leftanti GetUserOriginCountry on UserPrincipalName,$left.AnomalousLocationDetail == $right.CountryCode",
                                             "queryFrequency":  "PT1H",
                                             "queryPeriod":  "P14D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "InitialAccess"
                                                         ],
                                             "techniques":  [
                                                                "T1078"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  "ef895ada-e8e8-4cf0-9313-b1ab67fab69f",
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  true,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5M",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  {
                                                                          "alertDynamicProperties":  [

                                                                                                     ]
                                                                      },
                                             "customDetails":  {
                                                                   "Location":  "AnomalousLocationDetail"
                                                               },
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "FullName",
                                                                                                  "columnName":  "UserPrincipalName"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "IPAddress"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "Host",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "FullName",
                                                                                                  "columnName":  "Device"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  null
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}