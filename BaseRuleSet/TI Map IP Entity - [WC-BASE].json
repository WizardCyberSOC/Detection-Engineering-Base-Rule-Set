{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId(\u0027Microsoft.OperationalInsights/workspaces/providers\u0027, parameters(\u0027workspace\u0027), \u0027Microsoft.SecurityInsights\u0027),\u0027/alertRules/4dbd4046-4f8b-4518-b497-98671fa0e2e8\u0027)]",
                          "name":  "[concat(parameters(\u0027workspace\u0027),\u0027/Microsoft.SecurityInsights/4dbd4046-4f8b-4518-b497-98671fa0e2e8\u0027)]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "TI Map IP Entity - [WC-BASE]",
                                             "description":  "This rule maps all related tables\u0027 IP Addresses to Microsoft\u0027s Threat Intelligence IP Addresses Feed.",
                                             "severity":  "Low",
                                             "enabled":  true,
                                             "query":  "let dt_lookBack = 1h;\r\nlet ioc_lookBack = 14d;\r\n// Exclude managed device IPs\r\nlet ManagedAttempts = \r\n    SigninLogs\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | union AADNonInteractiveUserSignInLogs\r\n    | where isnotempty(DeviceDetail_dynamic.deviceId) or isnotempty(parse_json(DeviceDetail_string).deviceId)\r\n    | distinct IPAddress;\r\nlet IP_Indicators = ThreatIntelIndicators\r\n    | where TimeGenerated \u003e ago(ioc_lookBack)\r\n    | distinct TIEntity = ObservableValue\r\n    | where isnotempty(TIEntity)\r\n    | where ipv4_is_private(TIEntity) == false\r\n        and TIEntity !startswith \"fe80\"\r\n        and TIEntity !startswith \"::\"\r\n        and TIEntity !startswith \"127.\";\r\nunion isfuzzy=true\r\n    (\r\n    // W3CIISLog\r\n    IP_Indicators\r\n    | join kind=innerunique (\r\n        W3CIISLog\r\n        | where TimeGenerated \u003e= ago(dt_lookBack)\r\n        | where isnotempty(cIP)\r\n        | where ipv4_is_private(cIP) == false\r\n            and cIP !startswith \"fe80\"\r\n            and cIP !startswith \"::\"\r\n            and cIP !startswith \"127.\"\r\n        | extend TimeGeneratedLog = TimeGenerated\r\n        | join kind=leftanti ManagedAttempts on $left.cIP == $right.IPAddress\r\n        | where scStatus startswith \"2\"\r\n        | where csUriStem \u003c\u003e \"/\"\r\n        | where csUriStem \u003c\u003e \"/User/Login\"\r\n        | where csUriStem \u003c\u003e \"/General/Page404\"\r\n        | where csUriStem !startswith \"/Assets\"\r\n        )\r\n        on $left.TIEntity == $right.cIP\r\n    | extend case = \"W3CIISLog\"\r\n    ),\r\n    (\r\n    // SigninLogs\r\n    IP_Indicators\r\n    | join kind=innerunique (\r\n        SigninLogs\r\n        | where TimeGenerated \u003e= ago(dt_lookBack)\r\n        | where not((ResultType == 50126) or (parse_json(AuthenticationDetails)[0].authenticationMethod == \"Password\" and parse_json(AuthenticationDetails)[0].succeeded == false))\r\n        | join kind=leftanti ManagedAttempts on $left.IPAddress == $right.IPAddress\r\n        )\r\n        on $left.TIEntity == $right.IPAddress\r\n    | extend case = \"SigninLogs\"\r\n    ),\r\n    (\r\n    // SecurityEvent\r\n    IP_Indicators\r\n    | join kind=inner (\r\n        SecurityEvent\r\n        | where TimeGenerated \u003e ago(dt_lookBack)\r\n        | where EventID == 4624\r\n        | join kind=leftanti ManagedAttempts on $left.IpAddress == $right.IPAddress\r\n        )\r\n        on $left.TIEntity == $right.IpAddress\r\n    | extend case = \"SecurityEvent\"\r\n    ),\r\n    (\r\n    // OfficeActivity\r\n    IP_Indicators\r\n    | join kind=innerunique (\r\n        OfficeActivity\r\n        | where TimeGenerated \u003e= ago(dt_lookBack)\r\n        | where isnotempty(ClientIP)\r\n        | extend IPAddress = tostring(extract_all(@\u0027\\[?(::ffff:)?(?P\u003cIPAddress\u003e(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]%]+)(%\\d+)?\\]?([-:](?P\u003cPort\u003e\\d+))?\u0027, dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0][0])\r\n        | extend TimeGeneratedLog = TimeGenerated\r\n        | join kind=leftanti ManagedAttempts on $left.IPAddress == $right.IPAddress\r\n        )\r\n        on $left.TIEntity == $right.IPAddress\r\n    | extend case = \"OfficeActivity\"\r\n    ),\r\n    (\r\n    // MicrosoftGraphActivityLogs\r\n    IP_Indicators\r\n    | join kind=inner (\r\n        MicrosoftGraphActivityLogs\r\n        | where TimeGenerated \u003e ago(dt_lookBack)\r\n        | join kind=leftanti ManagedAttempts on $left.IPAddress == $right.IPAddress\r\n        )\r\n        on $left.TIEntity == $right.IPAddress\r\n    | extend case = \"MicrosoftGraphActivityLogs\"\r\n    ),\r\n    (\r\n    // CommonSecurityLog\r\n    IP_Indicators\r\n    | join kind=innerunique (\r\n        CommonSecurityLog\r\n        | where TimeGenerated \u003e= ago(dt_lookBack)\r\n        | extend CS_ipEntity = iff(isnotempty(SourceIP), SourceIP, DestinationIP)\r\n        | join kind=leftanti ManagedAttempts on $left.CS_ipEntity == $right.IPAddress\r\n        | where DeviceAction contains \"accept\" and Activity contains \"forward accept\"\r\n        | extend AcceptTime = TimeGenerated\r\n        )\r\n        on $left.TIEntity == $right.CS_ipEntity\r\n    | join kind=leftouter  (CommonSecurityLog\r\n        | where TimeGenerated \u003e= ago(dt_lookBack)\r\n        | where DeviceAction !contains \"accept\" or Activity !contains \"accept\"\r\n        | extend CS_ipEntity = iff(isnotempty(SourceIP), SourceIP, DestinationIP)\r\n        | join kind=inner IP_Indicators on $left.CS_ipEntity == $right.TIEntity\r\n        | extend CloseTime = TimeGenerated)\r\n        on TIEntity\r\n    | where isnotnull(CloseTime) and CloseTime \u003e AcceptTime\r\n    | summarize arg_min(CloseTime,*) by TIEntity\r\n    | where not((CloseTime \u003e AcceptTime) and (CloseTime \u003c AcceptTime + 10m))\r\n    | extend case = \"CommonSecurityLog\"\r\n    ),\r\n    (\r\n    // AzureActivity\r\n    IP_Indicators\r\n    | join kind=innerunique (\r\n        AzureActivity\r\n        | where TimeGenerated \u003e= ago(dt_lookBack)\r\n        | extend TimeGeneratedLog = TimeGenerated\r\n        | join kind=leftanti ManagedAttempts on $left.CallerIpAddress == $right.IPAddress\r\n        )\r\n        on $left.TIEntity == $right.CallerIpAddress\r\n    | extend case = \"AzureActivity\"\r\n    ),\r\n    (\r\n    // Azure Kubernetes\r\n    IP_Indicators\r\n    | join kind=inner (\r\n        AzureDiagnostics\r\n        | where TimeGenerated \u003e ago(dt_lookBack)\r\n        | where Category == \"kube-audit-admin\"\r\n        | extend log_s = column_ifexists(\"log_s\", \"\")\r\n        | extend SourceIP = tostring(parse_json(log_s).sourceIPs[0])\r\n        | extend ResponseStatus = tostring(parse_json(log_s).responseStatus.code)\r\n        | where ResponseStatus !startswith \"4\"\r\n        | join kind=leftanti ManagedAttempts on $left.SourceIP == $right.IPAddress\r\n        )\r\n        on $left.TIEntity == $right.SourceIP\r\n    | extend case = \"AzureKubernetes\"\r\n    ),\r\n    (\r\n    // Azure Key Vault Logs\r\n    IP_Indicators\r\n    | join kind=innerunique (\r\n        AzureDiagnostics\r\n        | where ResourceType =~ \"VAULTS\"\r\n        | where TimeGenerated \u003e= ago(dt_lookBack)\r\n        | extend ClientIP = CallerIPAddress\r\n        | join kind=leftanti ManagedAttempts on $left.ClientIP == $right.IPAddress\r\n        )\r\n        on $left.TIEntity == $right.ClientIP\r\n    | extend case = \"AzureKeyVault\"\r\n    )",
                                             "queryFrequency":  "PT1H",
                                             "queryPeriod":  "P14D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "InitialAccess",
                                                             "CommandAndControl"
                                                         ],
                                             "techniques":  [
                                                                "T1078",
                                                                "T1071"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  null,
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  false,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5H",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  {
                                                                          "alertDisplayNameFormat":  "TI Map IP Entity to {{case}} - [WC-BASE]",
                                                                          "alertDynamicProperties":  [

                                                                                                     ]
                                                                      },
                                             "customDetails":  {
                                                                   "Case":  "case"
                                                               },
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "TIEntity"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  null
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}