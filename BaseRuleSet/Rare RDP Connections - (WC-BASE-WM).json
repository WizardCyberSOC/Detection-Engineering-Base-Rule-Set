{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/248ea5e1-ad2c-4939-beea-01fcde474707')]",
                          "name":  "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/248ea5e1-ad2c-4939-beea-01fcde474707')]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Rare RDP Connections - [WC-BASE-WM]",
                                             "description":  "Identifies when an RDP connection is new or rare related to any logon type by a given account today based on comparison with the previous 14 days.\nRDP connections are indicated by the EventID 4624 with LogonType = 10",
                                             "severity":  "Medium",
                                             "enabled":  true,
                                             "query":  "let starttime = 14d;\nlet endtime = 1h;\nlet rpd_table=\n    (union isfuzzy=true\n        (SecurityEvent\n        | where TimeGenerated \u003e= ago(endtime)\n        | where EventID == 4624 and LogonType == 10\n        | summarize\n            StartTime = min(TimeGenerated),\n            EndTime = max(TimeGenerated),\n            ConnectionCount = count()\n            by\n            Account = tolower(Account),\n            Computer = toupper(Computer),\n            IpAddress,\n            AccountType,\n            Activity,\n            LogonTypeName,\n            ProcessName\n        // use left anti to exclude anything from the previous 14 days that is not rare\n        ),\n        (WindowsEvent\n        | where TimeGenerated \u003e= ago(endtime)\n        | where EventID == 4624 and EventData has (\"10\")\n        | extend LogonType = tostring(EventData.LogonType)\n        | where LogonType == 10 \n        | extend Account = strcat(tostring(EventData.TargetDomainName), \"\\\\\", tostring(EventData.TargetUserName))\n        | extend ProcessName = tostring(EventData.ProcessName)\n        | extend IpAddress = tostring(EventData.IpAddress)\n        | extend TargetUserSid = tostring(EventData.TargetUserSid)\n        | extend AccountType=case(Account endswith \"$\" or TargetUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(TargetUserSid), \"\", \"User\")\n        | extend Activity=\"4624 - An account was successfully logged on.\"\n        | extend LogonTypeName=\"10 - RemoteInteractive\"\n        | summarize\n            StartTime = min(TimeGenerated),\n            EndTime = max(TimeGenerated),\n            ConnectionCount = count()\n            by\n            Account = tolower(Account),\n            Computer = toupper(Computer),\n            IpAddress,\n            AccountType,\n            Activity,\n            LogonTypeName,\n            ProcessName\n        ))\n    | join kind=leftanti (\n        (union isfuzzy=true\n            (SecurityEvent\n            | where TimeGenerated between (ago(starttime) .. ago(endtime))\n            | where EventID == 4624\n            | summarize by Computer = toupper(Computer), IpAddress, Account = tolower(Account)\n            ),\n            (WindowsEvent\n            | where TimeGenerated between (ago(starttime) .. ago(endtime))\n            | where EventID == 4624\n            | extend IpAddress = tostring(EventData.IpAddress)\n            | extend Account = strcat(tostring(EventData.TargetDomainName), \"\\\\\", tostring(EventData.TargetUserName))\n            | summarize by Computer = toupper(Computer), IpAddress, Account = tolower(Account)\n            ))\n        )\n        on IpAddress\n    | summarize\n        StartTime = min(StartTime),\n        EndTime = max(EndTime),\n        ConnectionCount = sum(ConnectionCount)\n        by Account, Computer, IpAddress, AccountType, Activity, LogonTypeName, ProcessName\n    | extend\n        timestamp = StartTime,\n        AccountCustomEntity = Account,\n        HostCustomEntity = Computer,\n        IPCustomEntity = IpAddress;\nlet additional_info_attempts = SecurityEvent\n    | where EventID == 4624\n    | project\n        TimeGenerated,\n        Account,\n        Computer,\n        IpAddress,\n        AccountType,\n        Activity,\n        LogonTypeName,\n        ProcessName\n    | summarize IPSuccessfulAttempts14DaysCount = count() by IpAddress;\nlet additional_info_time = SecurityEvent\n    | where EventID == 4624\n    | project\n        TimeGenerated,\n        Account,\n        Computer,\n        IpAddress,\n        AccountType,\n        Activity,\n        LogonTypeName,\n        ProcessName\n    | summarize OldestSuccessfulAttemptfrom14Days = min(TimeGenerated) by IpAddress;\nrpd_table\n| join kind=leftouter additional_info_attempts on IpAddress\n| join kind=leftouter additional_info_time on IpAddress\n| project\n    Account,\n    Computer,\n    IpAddress,\n    AccountType,\n    Activity,\n    LogonTypeName,\n    ProcessName,\n    StartTime,\n    EndTime,\n    timestamp,\n    ConnectionCount,\n    IPSuccessfulAttempts14DaysCount,\n    OldestSuccessfulAttemptfrom14Days,\n    AccountCustomEntity,\n    HostCustomEntity,\n    IPCustomEntity\n| where not(ipv4_is_private(IPCustomEntity))\n| where not(IPCustomEntity == \"0.0.0.0\")\n| where not(IPCustomEntity == \"127.0.0.1\")\n| where not(isempty(IPCustomEntity))\n| where not(IPCustomEntity contains \"169.254\")\n// WHITELIST START\n| extend RuleName = 'Rare RDP Connections'\n| join kind=leftouter (_GetWatchlist('WizardCyberAnalyticalRulesTuning')\n) on RuleName\n| project-away RuleName,RuleName1\n| extend Tuning01 = todynamic(Tuning01)\n| extend Tuning02 = todynamic(Tuning02)\n| where not(  (TicketIDs contains \"2831322\" and isnotempty(Tuning01)) and Tuning01 has IPCustomEntity )\n| where not(  (TicketIDs contains \"2831322\" and isnotempty(Tuning01)) and ipv4_is_in_any_range( IPCustomEntity,Tuning02) )\n| project-away Tuning*,TicketIDs\n// WHITELIST END\n",
                                             "queryFrequency":  "PT1H",
                                             "queryPeriod":  "P14D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "InitialAccess",
                                                             "Persistence"
                                                         ],
                                             "techniques":  [
                                                                "T1133"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  "45b903c5-6f56-4969-af10-ae62ac709718",
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  true,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT1H",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  null,
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "FullName",
                                                                                                  "columnName":  "AccountCustomEntity"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "Host",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "FullName",
                                                                                                  "columnName":  "HostCustomEntity"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "IPCustomEntity"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  "1.2.1"
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}