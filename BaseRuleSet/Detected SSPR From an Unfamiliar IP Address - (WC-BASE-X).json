{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a8dbce7d-a65a-4b41-8429-4bf7ec5fd94a')]",
                          "name":  "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a8dbce7d-a65a-4b41-8429-4bf7ec5fd94a')]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Detected SSPR From an Unfamiliar IP Address - [WC-BASE-X]",
                                             "description":  "This rule detects SSPR attempts from either a relatively new location or from an unfamiliar IP address.\nExtended Functionality: This rule uses a watchlist that contains Microsoft's public IP address ranges for tuning purposes.",
                                             "severity":  "Medium",
                                             "enabled":  true,
                                             "query":  "let MSIPs = _GetWatchlist(\"MSPublicIPsV2\")\r\n    | project Subnet = SearchKey, FirstOctet = toint(split(SearchKey, \".\")[0]);\r\nlet GetNewUsers = IdentityInfo\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | project\r\n        DaysSinceAccountCreation = datetime_diff('day', now(), AccountCreationTime),\r\n        AccountCreationTime,\r\n        AccountUPN\r\n    | where DaysSinceAccountCreation \u003c 14\r\n    | distinct AccountUPN\r\n    | extend AccountUPN = tolower(AccountUPN);\r\nlet ManagedAttempts = SigninLogs\r\n    | union AADNonInteractiveUserSignInLogs\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | where (tostring(parse_json(DeviceDetail_dynamic).trustType) != \"\" or tostring(parse_json(DeviceDetail_string).trustType) != \"\") or (DeviceDetail_dynamic contains \"PII Removed\" or DeviceDetail_string contains \"PII Removed\")\r\n    | distinct IPAddress;\r\nlet SimilarIPSubnetUsersSigninLogs = SigninLogs\r\n    | union AADNonInteractiveUserSignInLogs\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | where ResultType == 0 and AuthenticationRequirement contains \"Multifactor\"\r\n    | extend IPSubnet = iff(\r\n                        indexof(IPAddress, \":\") != -1,  // If colon exists, it's IPv6\r\n                        trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \":\", indexof(IPAddress, \":\") + 1))),\r\n                        trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \".\", indexof(IPAddress, \".\") + 1)))\r\n                    )\r\n    | summarize SameIPSubnetUsersCount = dcount(UserPrincipalName) by IPSubnet\r\n    | where SameIPSubnetUsersCount \u003e 2; // ADJUST TO TUNE THE RULE\r\nlet SimilarIPSubnetUsersAuditLogs = AuditLogs\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) \r\n    | extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\r\n    | extend IPSubnet = iff(\r\n                        indexof(IPAddress, \":\") != -1,  // If colon exists, it's IPv6\r\n                        trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \":\", indexof(IPAddress, \":\") + 1))),\r\n                        trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \".\", indexof(IPAddress, \".\") + 1)))\r\n                    )\r\n    | summarize SameIPSubnetUsersCount = dcount(UserPrincipalName) by IPSubnet\r\n    | where SameIPSubnetUsersCount \u003e 2; // ADJUST TO TUNE THE RULE\r\nlet KnownLocations = SigninLogs\r\n    | where TimeGenerated between(ago(14d) .. ago(3d))\r\n    | where ResultType == 0\r\n    | where isnotempty(Location)\r\n    | extend State = iff(isempty(LocationDetails.state), \"Null\", LocationDetails.state)\r\n    | extend LocationDetail = strcat(Location, \"-\", State)\r\n    | summarize UserKnownLocation = make_set(LocationDetail) by UserPrincipalName;\r\nlet NewLocationUsers = SigninLogs\r\n    | where TimeGenerated \u003e ago(3d)\r\n    | where ResultType == 0\r\n    | where isnotempty(Location)\r\n    | join kind=inner KnownLocations on UserPrincipalName // To avoid new users MFA spam\r\n    | extend State = iff(isempty(LocationDetails.state), \"Null\", LocationDetails.state)\r\n    | extend AnomalousLocation = strcat(Location, \"-\", State)\r\n    | where not(UserKnownLocation has AnomalousLocation)\r\n    | join kind=leftanti ManagedAttempts on IPAddress\r\n    | distinct UserPrincipalName = tolower(UserPrincipalName);\r\nlet SSPRChangeCaseNewIP = AuditLogs \r\n    | where TimeGenerated \u003e ago(1h) // ADJUST BASED ON RULE FREQUENCY\r\n    | where OperationName in (\"Unlock user account (self-service)\", \"Reset password (self-service)\", \"Change password (self-service)\")\r\n    | where Result == \"success\" \r\n    | extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) \r\n    | extend UserPrincipalName = tolower(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName))\r\n    | where isnotempty(IPAddress)\r\n    | project\r\n        UserPrincipalName,\r\n        IPAddress,\r\n        OperationName,\r\n        ResultDescription,\r\n        Case = \"New IPAddress\"\r\n    | summarize\r\n        Operations = make_set(OperationName),\r\n        ResultDescriptions = make_set(ResultDescription)\r\n        by UserPrincipalName, IPAddress, Case\r\n    | extend IPSubnet = iff(\r\n                        indexof(IPAddress, \":\") != -1,  // If colon exists, it's IPv6\r\n                        trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \":\", indexof(IPAddress, \":\") + 1))),\r\n                        trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \".\", indexof(IPAddress, \".\") + 1)))\r\n                    )\r\n    | join kind=leftanti ManagedAttempts on IPAddress\r\n    | join kind=leftanti SimilarIPSubnetUsersSigninLogs on IPSubnet\r\n    | join kind=leftanti SimilarIPSubnetUsersAuditLogs on IPSubnet;\r\nlet SSPRChangeCaseNewLocation = AuditLogs \r\n    | where TimeGenerated \u003e ago(1h) // ADJUST BASED ON RULE FREQUENCY\r\n    | where OperationName in (\"Unlock user account (self-service)\", \"Reset password (self-service)\", \"Change password (self-service)\") \r\n    | where Result == \"success\" \r\n    | extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) \r\n    | extend UserPrincipalName = tolower(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName))\r\n    | where isnotempty(IPAddress)\r\n    | project\r\n        UserPrincipalName,\r\n        IPAddress,\r\n        OperationName,\r\n        ResultDescription,\r\n        Case = \"New Location\"\r\n    | join kind=inner NewLocationUsers on UserPrincipalName\r\n    | summarize\r\n        Operations = make_set(OperationName),\r\n        ResultDescriptions = make_set(ResultDescription)\r\n        by UserPrincipalName, IPAddress, Case;\r\nlet subnetCheck = SSPRChangeCaseNewIP\r\n    | extend IP = tostring(IPAddress)\r\n    | extend FirstOctet = toint(split(IP, \".\")[0])\r\n    | join kind=leftouter MSIPs on FirstOctet\r\n    | extend IsInSubnet = ipv4_is_in_range(IP, Subnet)\r\n    | summarize IsInSubnet = max(toint(IsInSubnet)) by IP;\r\nSSPRChangeCaseNewIP\r\n| join kind=leftouter subnetCheck on $left.IPAddress == $right.IP\r\n| extend IsInSubnet = tobool(IsInSubnet)\r\n| where IsInSubnet != true\r\n| project-away IPSubnet, IP\r\n| union SSPRChangeCaseNewLocation\r\n| join kind=leftanti GetNewUsers on $left.UserPrincipalName == $right.AccountUPN\r\n| join kind=leftanti ManagedAttempts on IPAddress;",
                                             "queryFrequency":  "PT1H",
                                             "queryPeriod":  "P14D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "Persistence",
                                                             "InitialAccess",
                                                             "DefenseEvasion",
                                                             "CredentialAccess"
                                                         ],
                                             "techniques":  [
                                                                "T1098",
                                                                "T1078",
                                                                "T1556"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  null,
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  false,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5H",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  null,
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Name",
                                                                                                  "columnName":  "UserPrincipalName"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "IPAddress"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "Process",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "CommandLine",
                                                                                                  "columnName":  "Operations"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "Process",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "CommandLine",
                                                                                                  "columnName":  "Case"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  null
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}