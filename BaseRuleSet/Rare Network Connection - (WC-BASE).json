{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c47574eb-bc3a-4b49-a278-ada07e917c4f')]",
                          "name":  "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c47574eb-bc3a-4b49-a278-ada07e917c4f')]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Rare Network Connection - [WC-BASE]",
                                             "description":  "Identifies when a network connection is new or rare related to any logon type by a given account today based on comparison with the previous 14 days.\nNetwork connections are indicated by the EventID 4624 with LogonType = 3",
                                             "severity":  "Medium",
                                             "enabled":  true,
                                             "query":  "let starttime = 14d;\r\nlet endtime = 1h;\r\nlet rpd_table=\r\n    (union isfuzzy=true\r\n        (SecurityEvent\r\n        | where TimeGenerated \u003e= ago(endtime)\r\n        | where EventID == 4624 and LogonType == 3\r\n        | summarize\r\n            StartTime = min(TimeGenerated),\r\n            EndTime = max(TimeGenerated),\r\n            ConnectionCount = count()\r\n            by\r\n            Account = tolower(Account),\r\n            Computer = toupper(Computer),\r\n            IpAddress,\r\n            AccountType,\r\n            Activity,\r\n            LogonTypeName,\r\n            ProcessName\r\n        // use left anti to exclude anything from the previous 14 days that is not rare\r\n        ),\r\n        (WindowsEvent\r\n        | where TimeGenerated \u003e= ago(endtime)\r\n        | where EventID == 4624 and EventData has (\"3\")\r\n        | extend LogonType = tostring(EventData.LogonType)\r\n        | where LogonType == 3 \r\n        | extend Account = strcat(tostring(EventData.TargetDomainName), \"\\\\\", tostring(EventData.TargetUserName))\r\n        | extend ProcessName = tostring(EventData.ProcessName)\r\n        | extend IpAddress = tostring(EventData.IpAddress)\r\n        | extend TargetUserSid = tostring(EventData.TargetUserSid)\r\n        | extend AccountType=case(Account endswith \"$\" or TargetUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(TargetUserSid), \"\", \"User\")\r\n        | extend Activity=\"4624 - An account was successfully logged on.\"\r\n        | extend LogonTypeName=\"10 - RemoteInteractive\"\r\n        | summarize\r\n            StartTime = min(TimeGenerated),\r\n            EndTime = max(TimeGenerated),\r\n            ConnectionCount = count()\r\n            by\r\n            Account = tolower(Account),\r\n            Computer = toupper(Computer),\r\n            IpAddress,\r\n            AccountType,\r\n            Activity,\r\n            LogonTypeName,\r\n            ProcessName\r\n        ))\r\n    | join kind=leftanti (\r\n        (union isfuzzy=true\r\n            (SecurityEvent\r\n            | where TimeGenerated between (ago(starttime) .. ago(endtime))\r\n            | where LogonType == 3 and AccountType contains \"User\"\r\n            | where EventID == 4624\r\n            | summarize by Computer = toupper(Computer), IpAddress, Account = tolower(Account)\r\n            ),\r\n            (WindowsEvent\r\n            | where TimeGenerated between (ago(starttime) .. ago(endtime))\r\n            | where EventID == 4624\r\n            | extend IpAddress = tostring(EventData.IpAddress)\r\n            | extend Account = strcat(tostring(EventData.TargetDomainName), \"\\\\\", tostring(EventData.TargetUserName))\r\n            | summarize by Computer = toupper(Computer), IpAddress, Account = tolower(Account)\r\n            ))\r\n        )\r\n        on IpAddress\r\n    | summarize\r\n        StartTime = min(StartTime),\r\n        EndTime = max(EndTime),\r\n        ConnectionCount = sum(ConnectionCount)\r\n        by Account, Computer, IpAddress, AccountType, Activity, LogonTypeName, ProcessName\r\n    | extend\r\n        timestamp = StartTime,\r\n        AccountCustomEntity = Account,\r\n        HostCustomEntity = Computer,\r\n        IPCustomEntity = IpAddress;\r\nlet additional_info_attempts = SecurityEvent\r\n    | where EventID == 4624\r\n    | project\r\n        TimeGenerated,\r\n        Account,\r\n        Computer,\r\n        IpAddress,\r\n        AccountType,\r\n        Activity,\r\n        LogonTypeName,\r\n        ProcessName\r\n    | summarize IPSuccessfulAttempts14DaysCount = count() by IpAddress;\r\nlet additional_info_time = SecurityEvent\r\n    | where EventID == 4624\r\n    | project\r\n        TimeGenerated,\r\n        Account,\r\n        Computer,\r\n        IpAddress,\r\n        AccountType,\r\n        Activity,\r\n        LogonTypeName,\r\n        ProcessName\r\n    | summarize OldestSuccessfulAttemptfrom14Days = min(TimeGenerated) by IpAddress;\r\nrpd_table\r\n| join kind=leftouter additional_info_attempts on IpAddress\r\n| join kind=leftouter additional_info_time on IpAddress\r\n| project\r\n    Account,\r\n    Computer,\r\n    IpAddress,\r\n    AccountType,\r\n    Activity,\r\n    LogonTypeName,\r\n    ProcessName,\r\n    StartTime,\r\n    EndTime,\r\n    timestamp,\r\n    ConnectionCount,\r\n    IPSuccessfulAttempts14DaysCount,\r\n    OldestSuccessfulAttemptfrom14Days,\r\n    AccountCustomEntity,\r\n    HostCustomEntity,\r\n    IPCustomEntity\r\n| where not( ipv4_is_private( IPCustomEntity))\r\n| where not( IPCustomEntity == \"0.0.0.0\")\r\n| where not( IPCustomEntity == \"127.0.0.1\")\r\n| where not( IPCustomEntity contains \"169.254\")\r\n| where not( isempty(IPCustomEntity ))",
                                             "queryFrequency":  "PT1H",
                                             "queryPeriod":  "P14D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "InitialAccess",
                                                             "Persistence"
                                                         ],
                                             "techniques":  [
                                                                "T1133"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  null,
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  true,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "P1D",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  null,
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Name",
                                                                                                  "columnName":  "Account"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "Host",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "HostName",
                                                                                                  "columnName":  "Computer"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "IpAddress"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  null
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}