{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId(\u0027Microsoft.OperationalInsights/workspaces/providers\u0027, parameters(\u0027workspace\u0027), \u0027Microsoft.SecurityInsights\u0027),\u0027/alertRules/2fe07bde-3a32-4514-b67b-3cad6fdd7410\u0027)]",
                          "name":  "[concat(parameters(\u0027workspace\u0027),\u0027/Microsoft.SecurityInsights/2fe07bde-3a32-4514-b67b-3cad6fdd7410\u0027)]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Log4j vulnerability exploit aka Log4Shell IP IOC - [WC-BASE]",
                                             "description":  "Identifies a match across various data feeds for IP IOCs related to the Log4j vulnerability exploit aka Log4Shell described in CVE-2021-44228.  \n References: https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-44228\u0027",
                                             "severity":  "Medium",
                                             "enabled":  true,
                                             "query":  "let IPList = externaldata(IPAddress: string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Log4j_IOC_List.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet IPRegex = \u0027[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\u0027;\n//Network logs\nlet CSlogSourceIP = CommonSecurityLog\n    | summarize by IPAddress = SourceIP, Type;\nlet CSlogDestIP = CommonSecurityLog\n    | summarize by IPAddress = DestinationIP, Type;\nlet CSlogMsgIP = CommonSecurityLog\n    | extend MessageIP = extract(IPRegex, 0, Message)\n    | summarize by IPAddress = MessageIP, Type;\nlet DnsIP = DnsEvents\n    | summarize by IPAddress = IPAddresses, Type;\n// If you have enabled the imDNS and/or imNetworkSession normalization in your workspace, you can uncomment one or both below.  Reference - https://docs.microsoft.com/azure/sentinel/normalization\n//let imDnsIP = imDns (response_has_any_prefix=IPList) | summarize by IPAddress = ResponseName, Type;\n//let imNetSessIP = imNetworkSession (dstipaddr_has_any_prefix=IPList) | summarize by IPAddress = DstIpAddr, Type;\n//Cloud service logs\nlet officeIP = OfficeActivity\n    | summarize by IPAddress = ClientIP, Type;\nlet signinIP = SigninLogs\n    | summarize by IPAddress, Type;\nlet nonintSigninIP = AADNonInteractiveUserSignInLogs\n    | summarize by IPAddress, Type;\nlet azureActIP = AzureActivity\n    | summarize by IPAddress = CallerIpAddress, Type;\nlet awsCtIP = AWSCloudTrail\n    | summarize by IPAddress = SourceIpAddress, Type;\n//Device logs\nlet vmConnSourceIP = VMConnection\n    | summarize by IPAddress = SourceIp, Type;\nlet vmConnDestIP = VMConnection\n    | summarize by IPAddress = DestinationIp, Type;\nlet iisLogIP = W3CIISLog\n    | summarize by IPAddress = cIP, Type;\nlet devNetIP = DeviceNetworkEvents\n    | summarize by IPAddress = RemoteIP, Type;\n//need to parse to get IP\nlet azureDiagIP = AzureDiagnostics\n    | where ResourceType == \"AZUREFIREWALLS\"\n    | where Category in (\"AzureFirewallApplicationRule\", \"AzureFirewallNetworkRule\") \n    | where msg_s has_any (IPList)\n    | parse msg_s with Protocol \u0027request from \u0027 SourceHost \u0027:\u0027 SourcePort \u0027to \u0027 DestinationHost \u0027:\u0027 DestinationPort \u0027. Action:\u0027 Action\n    | summarize by IPAddress = DestinationHost, Type;\nlet sysEvtIP = Event\n    | where Source == \"Microsoft-Windows-Sysmon\"\n    | where EventID == 3\n    | where EventData has_any (IPList)\n    | extend EvData = parse_xml(EventData)\n    | extend EventDetail = EvData.DataItem.EventData.Data\n    | extend\n        SourceIP = tostring(EventDetail.[9].[\"#text\"]),\n        DestinationIP = tostring(EventDetail.[14].[\"#text\"])\n    | where SourceIP in (IPList) or DestinationIP in (IPList)\n    | extend IPAddress = iff(SourceIP in (IPList), SourceIP, DestinationIP)\n    | summarize by IPAddress, Type;\n// If you have enabled the imDNS and/or imNetworkSession normalization in your workdspace, you can uncomment below and include. Reference - https://docs.microsoft.com/azure/sentinel/normalization\n//let ipsort = union isfuzzy=true CSlogDestIP, CSlogMsgIP, CSlogSourceIP, DnsIP, officeIP, signinIP, nonintSigninIP, azureActIP, awsCtIP, vmConnDestIP, vmConnSourceIP, azureDiagIP, sysEvtIP, imDnsIP, imNetSessIP\n// If you uncomment above, then comment out the line below\nlet ipsort = union isfuzzy=true\n        CSlogDestIP,\n        CSlogMsgIP,\n        CSlogSourceIP,\n        DnsIP,\n        officeIP,\n        signinIP,\n        nonintSigninIP,\n        azureActIP,\n        awsCtIP,\n        vmConnDestIP,\n        vmConnSourceIP,\n        azureDiagIP,\n        sysEvtIP\n    | summarize by IPAddress\n    | where isnotempty(IPAddress)\n    | where not(ipv4_is_private(IPAddress)) and IPAddress !in (\u00270.0.0.0\u0027, \u0027127.0.0.1\u0027);\nlet ipMatch = ipsort\n    | where IPAddress in (IPList);\n(union isfuzzy=true\n    (CommonSecurityLog\n    | where SourceIP in (ipMatch) or DestinationIP in (ipMatch) or Message has_any (ipMatch)\n    | extend MessageIP = extract(IPRegex, 0, Message)\n    | where DeviceAction !in (\"drop\",\"deny\")\n    | extend IPMatch = case(SourceIP in (ipMatch), \"SourceIP\", DestinationIP in (ipMatch), \"DestinationIP\", MessageIP in (ipMatch), \"Message\", \"No Match\")\n    | extend\n        timestamp = TimeGenerated,\n        IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, \"No Match\")\n    ),\n    (OfficeActivity\n    | where ClientIP in (ipMatch)\n    | project TimeGenerated, UserAgent, Operation, RecordType, UserId, ClientIP, Type\n    | extend SourceIPAddress = ClientIP, Account = UserId\n    | extend\n        timestamp = TimeGenerated,\n        IPCustomEntity = SourceIPAddress,\n        AccountCustomEntity = Account\n    ),\n    (DnsEvents\n    | where IPAddresses has_any (ipMatch)\n    | project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n    | extend DestinationIPAddress = IPAddresses, Host = Computer\n    | extend\n        timestamp = TimeGenerated,\n        IPCustomEntity = DestinationIPAddress,\n        HostCustomEntity = Host\n    ),\n    (VMConnection\n    | where SourceIp in (ipMatch) or DestinationIp in (ipMatch)\n    | project TimeGenerated, Computer, SourceIp, DestinationIp, Type\n    | extend IPMatch = case(SourceIp in (ipMatch), \"SourceIP\", DestinationIp in (ipMatch), \"DestinationIP\", \"None\")\n    | extend\n        timestamp = TimeGenerated,\n        IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"None\"),\n        Host = Computer\n    ),\n    (Event\n    | where Source == \"Microsoft-Windows-Sysmon\"\n    | where EventID == 3\n    | where EventData has_any (ipMatch)\n    | project TimeGenerated, EventData, UserName, Computer, Type\n    | extend EvData = parse_xml(EventData)\n    | extend EventDetail = EvData.DataItem.EventData.Data\n    | extend\n        SourceIP = tostring(EventDetail.[9].[\"#text\"]),\n        DestinationIP = tostring(EventDetail.[14].[\"#text\"])\n    | where SourceIP in (ipMatch) or DestinationIP in (ipMatch)\n    | extend IPMatch = case(SourceIP in (ipMatch), \"SourceIP\", DestinationIP in (ipMatch), \"DestinationIP\", \"None\")\n    | extend\n        timestamp = TimeGenerated,\n        AccountCustomEntity = UserName,\n        HostCustomEntity = Computer,\n        IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n    ),\n    (SigninLogs\n    | where IPAddress in (ipMatch)\n    | project TimeGenerated, UserPrincipalName, IPAddress, Type\n    | extend\n        timestamp = TimeGenerated,\n        AccountCustomEntity = UserPrincipalName,\n        IPCustomEntity = IPAddress\n    ),\n    (AADNonInteractiveUserSignInLogs\n    | where IPAddress in (ipMatch)\n    | project TimeGenerated, UserPrincipalName, IPAddress, Type\n    | extend\n        timestamp = TimeGenerated,\n        AccountCustomEntity = UserPrincipalName,\n        IPCustomEntity = IPAddress\n    ),\n    (W3CIISLog\n    | where cIP in (ipMatch)\n    | project TimeGenerated, Computer, cIP, csUserName, Type\n    | extend\n        timestamp = TimeGenerated,\n        IPCustomEntity = cIP,\n        HostCustomEntity = Computer,\n        AccountCustomEntity = csUserName\n    ),\n    (AzureActivity\n    | where CallerIpAddress in (ipMatch)\n    | project TimeGenerated, CallerIpAddress, Caller, Type\n    | extend\n        timestamp = TimeGenerated,\n        IPCustomEntity = CallerIpAddress,\n        AccountCustomEntity = Caller\n    ),\n    (\n    AWSCloudTrail\n    | where SourceIpAddress in (ipMatch)\n    | project TimeGenerated, SourceIpAddress, UserIdentityUserName, Type\n    | extend\n        timestamp = TimeGenerated,\n        IPCustomEntity = SourceIpAddress,\n        AccountCustomEntity = UserIdentityUserName\n    ), \n    ( \n    DeviceNetworkEvents\n    | where RemoteIP in (ipMatch)\n    | where ActionType == \"InboundConnectionAccepted\"\n    | project TimeGenerated, RemoteIP, DeviceName, Type\n    | extend\n        timestamp = TimeGenerated,\n        IPCustomEntity = RemoteIP,\n        HostCustomEntity = DeviceName\n    ),\n    (\n    AzureDiagnostics\n    | where ResourceType == \"AZUREFIREWALLS\"\n    | where Category in (\"AzureFirewallApplicationRule\", \"AzureFirewallNetworkRule\")\n    | where msg_s has_any (ipMatch)\n    | project TimeGenerated, msg_s, Type\n    | parse msg_s with Protocol \u0027request from \u0027 SourceIP \u0027:\u0027 SourcePort \u0027to \u0027 DestinationIP \u0027:\u0027 DestinationPort \u0027. Action:\u0027 Action\n    | where DestinationIP has_any (ipMatch)\n    | extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP\n    )\n// If you have enabled the imDNS and/or imNetworkSession normalization in your workdspace, you can uncomment below and include. Reference - https://docs.microsoft.com/azure/sentinel/normalization\n//,\n//(imDns (response_has_any_prefix=IPList)\n//| project TimeGenerated, ResponseName, SrcIpAddr, Type\n//| extend DestinationIPAddress = ResponseName,  Host = SrcIpAddr\n//| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host\n//),\n//(imNetworkSession (dstipaddr_has_any_prefix=IPList)\n//| project TimeGenerated, DstIpAddr, SrcIpAddr, Type\n//| extend timestamp = TimeGenerated, IPCustomEntity = DstIpAddr, HostCustomEntity = SrcIpAddr\n//)\n)",
                                             "queryFrequency":  "PT15M",
                                             "queryPeriod":  "PT15M",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "CommandAndControl"
                                                         ],
                                             "techniques":  [
                                                                "T1071"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  "6e575295-a7e6-464c-8192-3e1d8fd6a990",
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  true,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5M",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  {

                                                               },
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "FullName",
                                                                                                  "columnName":  "AccountCustomEntity"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "Host",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "FullName",
                                                                                                  "columnName":  "HostCustomEntity"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "IPCustomEntity"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  null
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}