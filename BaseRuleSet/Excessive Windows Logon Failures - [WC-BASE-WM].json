{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId(\u0027Microsoft.OperationalInsights/workspaces/providers\u0027, parameters(\u0027workspace\u0027), \u0027Microsoft.SecurityInsights\u0027),\u0027/alertRules/1fb6b468-4c23-4231-95f5-54864a422288\u0027)]",
                          "name":  "[concat(parameters(\u0027workspace\u0027),\u0027/Microsoft.SecurityInsights/1fb6b468-4c23-4231-95f5-54864a422288\u0027)]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Excessive Windows Logon Failures - [WC-BASE-WM]",
                                             "description":  "This query identifies user accounts which has over 50 Windows logon failures today and at least 33% of the count of logon failures over the previous 7 days.",
                                             "severity":  "Low",
                                             "enabled":  true,
                                             "query":  "let starttime = 8d;\nlet endtime = 1d;\nlet threshold = 0.333;\nlet countlimit = 50;\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime)\n| where EventID == 4625 and AccountType =~ \"User\"\n| where IpAddress !in (\"127.0.0.1\", \"::1\")\n| summarize\n    StartTime = min(TimeGenerated),\n    EndTime = max(TimeGenerated),\n    CountToday = count()\n    by\n    EventID,\n    Account,\n    LogonTypeName,\n    SubStatus,\n    AccountType,\n    Computer,\n    WorkstationName,\n    IpAddress,\n    Process\n| join kind=leftouter (\n    SecurityEvent\n    | where TimeGenerated between (ago(starttime) .. ago(endtime))\n    | where EventID == 4625 and AccountType =~ \"User\"\n    | where IpAddress !in (\"127.0.0.1\", \"::1\")\n    | summarize CountPrev7day = count()\n        by\n        EventID,\n        Account,\n        LogonTypeName,\n        SubStatus,\n        AccountType,\n        Computer,\n        WorkstationName,\n        IpAddress\n    )\n    on\n    EventID,\n    Account,\n    LogonTypeName,\n    SubStatus,\n    AccountType,\n    Computer,\n    WorkstationName,\n    IpAddress\n| where CountToday \u003e= coalesce(CountPrev7day, 0) * threshold and CountToday \u003e= countlimit\n//SubStatus Codes are detailed here - https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4625\n| extend Reason = case(\n                      SubStatus =~ \u00270xC000005E\u0027,\n                      \u0027There are currently no logon servers available to service the logon request.\u0027,\n                      SubStatus =~ \u00270xC0000064\u0027,\n                      \u0027User logon with misspelled or bad user account\u0027,\n                      SubStatus =~ \u00270xC000006A\u0027,\n                      \u0027User logon with misspelled or bad password\u0027,\n                      SubStatus =~ \u00270xC000006D\u0027,\n                      \u0027Bad user name or password\u0027,\n                      SubStatus =~ \u00270xC000006E\u0027,\n                      \u0027Unknown user name or bad password\u0027,\n                      SubStatus =~ \u00270xC000006F\u0027,\n                      \u0027User logon outside authorized hours\u0027,\n                      SubStatus =~ \u00270xC0000070\u0027,\n                      \u0027User logon from unauthorized workstation\u0027,\n                      SubStatus =~ \u00270xC0000071\u0027,\n                      \u0027User logon with expired password\u0027,\n                      SubStatus =~ \u00270xC0000072\u0027,\n                      \u0027User logon to account disabled by administrator\u0027,\n                      SubStatus =~ \u00270xC00000DC\u0027,\n                      \u0027Indicates the Sam Server was in the wrong state to perform the desired operation\u0027,\n                      SubStatus =~ \u00270xC0000133\u0027,\n                      \u0027Clocks between DC and other computer too far out of sync\u0027,\n                      SubStatus =~ \u00270xC000015B\u0027,\n                      \u0027The user has not been granted the requested logon type (aka logon right) at this machine\u0027,\n                      SubStatus =~ \u00270xC000018C\u0027,\n                      \u0027The logon request failed because the trust relationship between the primary domain and the trusted domain failed\u0027,\n                      SubStatus =~ \u00270xC0000192\u0027,\n                      \u0027An attempt was made to logon, but the Netlogon service was not started\u0027,\n                      SubStatus =~ \u00270xC0000193\u0027,\n                      \u0027User logon with expired account\u0027,\n                      SubStatus =~ \u00270xC0000224\u0027,\n                      \u0027User is required to change password at next logon\u0027,\n                      SubStatus =~ \u00270xC0000225\u0027,\n                      \u0027Evidently a bug in Windows and not a risk\u0027,\n                      SubStatus =~ \u00270xC0000234\u0027,\n                      \u0027User logon with account locked\u0027,\n                      SubStatus =~ \u00270xC00002EE\u0027,\n                      \u0027Failure Reason: An Error occurred during Logon\u0027,\n                      SubStatus =~ \u00270xC0000413\u0027,\n                      \u0027Logon Failure: The machine you are logging onto is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine\u0027,\n                      strcat(\u0027Unknown reason substatus: \u0027, SubStatus)\n                  )\n| extend WorkstationName = iff(WorkstationName == \"-\" or isempty(WorkstationName), Computer, WorkstationName)\n| project\n    StartTime,\n    EndTime,\n    EventID,\n    Account,\n    LogonTypeName,\n    SubStatus,\n    Reason,\n    AccountType,\n    Computer,\n    WorkstationName,\n    IpAddress,\n    CountToday,\n    CountPrev7day,\n    Avg7Day = round(CountPrev7day * 1.00 / 7, 2),\n    Process\n| summarize\n    StartTime = min(StartTime),\n    EndTime = max(EndTime),\n    Computer = make_set(Computer, 128),\n    sum(CountToday),\n    sum(CountPrev7day),\n    avg(Avg7Day)\n    by\n    EventID,\n    Account,\n    IpAddress,\n    LogonTypeName,\n    SubStatus,\n    Reason,\n    AccountType,\n    WorkstationName,\n    Process\n| order by sum_CountToday desc nulls last\n| extend\n    timestamp = StartTime,\n    NTDomain = tostring(split(Account, \u0027\\\\\u0027, 0)[0]),\n    Name = tostring(split(Account, \u0027\\\\\u0027, 1)[0]),\n    HostName = tostring(split(WorkstationName, \u0027.\u0027, 0)[0]),\n    DnsDomain = tostring(strcat_array(array_slice(split(WorkstationName, \u0027.\u0027), 1, -1), \u0027.\u0027))\n| where not(ipv4_is_private(IpAddress))\n| where not(IpAddress == \"0.0.0.0\")\n| where not(IpAddress == \"127.0.0.1\")\n| where not(isempty(IpAddress))\n| where not(IpAddress contains \"169.254\")\n// WHITELIST START\n| extend RuleName = \u0027Excessive Windows Logon Failures\u0027\n| join kind=leftouter (_GetWatchlist(\u0027WizardCyberAnalyticalRulesTuning\u0027)\n) on RuleName\n| project-away RuleName,RuleName1\n| extend Tuning01 = todynamic(Tuning01)\n| where not(  (TicketIDs contains \"3017935\" and isnotempty(Tuning01)) and (Tuning01.[0] == IpAddress or Tuning01.[1] == IpAddress)  )\n| project-away Tuning*,TicketIDs\n// WHITELIST END\n",
                                             "queryFrequency":  "P1D",
                                             "queryPeriod":  "P8D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "CredentialAccess"
                                                         ],
                                             "techniques":  [
                                                                "T1110"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  "2391ce61-8c8d-41ac-9723-d945b2e90720",
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  true,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "P1D",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  null,
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Name",
                                                                                                  "columnName":  "Name"
                                                                                              },
                                                                                              {
                                                                                                  "identifier":  "NTDomain",
                                                                                                  "columnName":  "NTDomain"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "Host",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "HostName",
                                                                                                  "columnName":  "HostName"
                                                                                              },
                                                                                              {
                                                                                                  "identifier":  "DnsDomain",
                                                                                                  "columnName":  "DnsDomain"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  "2.0.2"
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}