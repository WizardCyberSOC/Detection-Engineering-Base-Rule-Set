{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4ee0d915-b344-42b6-bd54-f925f6d18693')]",
                          "name":  "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4ee0d915-b344-42b6-bd54-f925f6d18693')]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Data Exfiltration via Microsoft Teams - [WC-BASE-M]",
                                             "description":  "This KQL query is designed to detect potential data exfiltration via Microsoft Teams by monitoring for unusual patterns in the volume of messages sent to external domains. Here's a simplified breakdown:\n\n    Context: The query is used to identify if a malicious actor has gained access to an Office 365 user account and is using Power Automate to send email content to an external domain via Teams messages.\n\n    Data Source: The query leverages data from Microsoft Defenderâ€™s CloudAppEvents.\n\n    Filtering Criteria:\n        It looks for events where the application is \"Microsoft Teams\" and the action type is \"MessageSent\".\n        It extends the data to include user account information, communication type, and whether the message involves external tenants.\n        It filters for one-on-one or group chat communications that involve external tenants.\n\n    Analysis:\n        It counts the number of messages sent to each external domain.\n        It sorts these counts in descending order.\n\n    Threshold and Whitelisting:\n        It sets a threshold to trigger alerts if more than 20 messages are sent to an external domain.\n        It excludes messages sent to trusted external partner domains to avoid false positives.\n\n    Outcome: When the threshold is exceeded, the security team is alerted to investigate the authenticity of the communications.\n\nIn summary, this query helps detect unusual and potentially unauthorized data transfers via Microsoft Teams by monitoring message volumes to external domains and excluding trusted partners to reduce false alarms.",
                                             "severity":  "High",
                                             "enabled":  true,
                                             "query":  "// Data Exfiltration via Microsoft Team\r\n// Should a malicious actor gain access to an Office 365 user account and initiate the unauthorized transfer of email content by utilizing Power Automate to trigger an Office 365 Outlook flow that sends a Teams message to an external domain upon the arrival of a new email, do you possess the detection capabilities for such unauthorized data transfers? The KQL script provided leverages Microsoft Defenderâ€™s CloudAppEvents to identify unusual patterns in the volume of Teams messages directed to specific external domains. Upon activation of the monitoring alert, the security team is prompted to conduct a thorough investigation to verify the authenticity of the Teams communications. In instances where your users frequently collaborate with known external partner tenants, implementing a whitelist can help avert unwarranted rule activations.\r\nlet GetTenantDomain= \r\nEmailEvents\r\n| where EmailDirection == \"Inbound\"\r\n| extend TenantDomain = tostring(split(RecipientEmailAddress,\"@\",1).[0])\r\n| summarize count() by TenantDomain\r\n| order by count_ desc \r\n| take 10\r\n| project TenantDomain;\r\nCloudAppEvents\r\n| where Application == \"Microsoft Teams\"\r\n| where ActionType == \"MessageSent\"\r\n| extend AccountUPN = RawEventData.UserId\r\n| extend CommsType = RawEventData.CommunicationType\r\n| extend ExternalTenant = RawEventData.ParticipantInfo.HasForeignTenantUsers\r\n| extend ExtUserDomain = tostring(split(AccountUPN, '@')[1])\r\n| where CommsType == \"OneOnOne\" or CommsType == \"GroupChat\"\r\n| where ExternalTenant == \"true\"\r\n| where ExtUserDomain != \"\"\r\n| summarize Count=count() by ExtUserDomain\r\n| sort by Count desc\r\n// Set your Teams msg trigger threshold to external tenant \r\n| where Count \u003e 50\r\n// Whitelist External Partner Domain\r\n| where ExtUserDomain !in (GetTenantDomain)\r\n",
                                             "queryFrequency":  "PT1H",
                                             "queryPeriod":  "PT1H",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "Exfiltration"
                                                         ],
                                             "techniques":  [
                                                                "T1537"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  null,
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  false,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5H",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  {
                                                                          "alertDynamicProperties":  [

                                                                                                     ]
                                                                      },
                                             "customDetails":  null,
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Name",
                                                                                                  "columnName":  "ExtUserDomain"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  null
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}