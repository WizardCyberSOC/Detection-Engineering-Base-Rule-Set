{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId(\u0027Microsoft.OperationalInsights/workspaces/providers\u0027, parameters(\u0027workspace\u0027), \u0027Microsoft.SecurityInsights\u0027),\u0027/alertRules/130b3a43-2cf2-4e31-ae5a-3593fb2e3538\u0027)]",
                          "name":  "[concat(parameters(\u0027workspace\u0027),\u0027/Microsoft.SecurityInsights/130b3a43-2cf2-4e31-ae5a-3593fb2e3538\u0027)]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Credential errors stateful anomaly on database - [WC-BASE]",
                                             "description":  "This query batches of distinct SQL queries that failed with error codes that might indicate malicious attempts to gain illegitimate access to the data. When Brute Force attacks are attempted, majority of logins will use wrong credentials, thus will fail with error code 18456. Thus, if we see a large number of logins with such error codes, this could indicate Brute Force attack.",
                                             "severity":  "Medium",
                                             "enabled":  true,
                                             "query":  "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\r\n    let trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\r\n    let timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\r\n    let detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \r\n    let trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\r\n    let monitoredErrors = pack_array(18456);        // List of sql error codes relevant for this detection.\r\n    let processedData = materialize (\r\n        AzureDiagnostics\r\n           | extend \r\n    host_name_s = column_ifexists(\"host_name_s\", \"\"),\r\n    client_ip_s = column_ifexists(\"client_ip_s\", \"\"),\r\n    action_id_s = column_ifexists(\"action_id_s\", \"\"),\r\n    server_principal_name_s = column_ifexists(\"server_principal_name_s\", \"\"),\r\n    action_name_s = column_ifexists(\"action_name_s\", \"\"),\r\n    application_name_s = column_ifexists(\"application_name_s\", \"\"),\r\n    succeeded_s = column_ifexists(\"succeeded_s\", \"\"),\r\n    affected_rows_d = column_ifexists(\"affected_rows_d\", 0),\r\n    statement_s = column_ifexists(\"statement_s\", \"\"),\r\n    additional_information_s = column_ifexists(\"additional_information_s\", \"\"),\r\n    database_name_s = column_ifexists(\"database_name_s\", \"\"),\r\n    LogicalServerName_s = column_ifexists(\"LogicalServerName_s\", \"\"),\r\n    response_rows_d = column_ifexists(\"response_rows_d\", 0)\r\n        | where Category == \u0027SQLSecurityAuditEvents\u0027 and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\r\n        | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\r\n                  ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, \u0027/\u0027, database_name_s),\r\n                  IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\r\n                  ResponseRows = response_rows_d, Statement = statement_s,\r\n                  Error = case( additional_information_s has \u0027error_code\u0027, toint(extract(\"\u003cerror_code\u003e([0-9.]+)\", 1, additional_information_s))\r\n                        , additional_information_s has \u0027failure_reason\u0027, toint(extract(\"\u003cfailure_reason\u003eErr ([0-9.]+)\", 1, additional_information_s))\r\n                        , 0),\r\n                  State = case( additional_information_s has \u0027error_state\u0027, toint(extract(\"\u003cerror_state\u003e([0-9.]+)\", 1, additional_information_s))\r\n                        , additional_information_s has \u0027failure_reason\u0027, toint(extract(\"\u003cfailure_reason\u003eErr ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\r\n                        , 0),\r\n                  AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\r\n        | summarize countEvents = count(), countStatements = dcount(Statement), countStatementsWithError = dcountif(Statement, Error in (monitoredErrors))\r\n            , anyMonitoredStatement = anyif(Statement, Error in (monitoredErrors)), anyInfo = anyif(AdditionalInfo, Error in (monitoredErrors))\r\n            by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId\r\n        | extend WindowType = case( timeSlice \u003e= ago(detectionWindow), \u0027detection\u0027,\r\n                                               (ago(trainingWindow) \u003c= timeSlice and timeSlice \u003c ago(detectionWindow)), \u0027training\u0027, \u0027other\u0027)\r\n        | where WindowType in (\u0027detection\u0027, \u0027training\u0027));\r\n    let trainingSet =\r\n        processedData\r\n        | where WindowType == \u0027training\u0027\r\n        | summarize countSlicesWithErrors = dcountif(timeSlice, countStatementsWithError \u003e= monitoredStatementsThreshold)\r\n            by Database;\r\n    processedData\r\n    | where WindowType == \u0027detection\u0027 \r\n    | join kind = inner (trainingSet) on Database\r\n    | extend IsErrorAnomalyOnStatement = iff(((countStatementsWithError \u003e= monitoredStatementsThreshold) and (countSlicesWithErrors \u003c= trainingSlicesThreshold)), true, false)\r\n        , anomalyScore = round(countStatementsWithError/monitoredStatementsThreshold, 0)\r\n    | where IsErrorAnomalyOnStatement == \u0027true\u0027\r\n    | sort by anomalyScore desc, timeSlice desc\r\n    | extend Name = tostring(split(PrincipalName,\u0027@\u0027,0)[0]), UPNSuffix = tostring(split(PrincipalName,\u0027@\u0027,1)[0])\r\n",
                                             "queryFrequency":  "PT1H",
                                             "queryPeriod":  "P14D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "InitialAccess"
                                                         ],
                                             "techniques":  [
                                                                "T0819",
                                                                "T1190"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  null,
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  false,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5H",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  null,
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Host",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "HostName",
                                                                                                  "columnName":  "Database"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "ClientIp"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  null
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}